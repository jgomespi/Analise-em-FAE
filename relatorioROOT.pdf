\documentclass[a4 paper]{article}
\usepackage[brazil]{babel}
\usepackage[utf8]{inputenc}
% Set target color model to RGB
\usepackage[inner=2.0cm,outer=2.0cm,top=2.5cm,bottom=2.5cm]{geometry}
\usepackage{setspace}
\usepackage[rgb]{xcolor}
\usepackage{verbatim}
\usepackage{subcaption}
\usepackage{amsgen,amsmath,amstext,amsbsy,amsopn,tikz,amssymb,tkz-linknodes}
\usepackage{fancyhdr}
\usepackage[colorlinks=true, urlcolor=blue,  linkcolor=blue, citecolor=blue]{hyperref}
\usepackage[colorinlistoftodos]{todonotes}
\usepackage{rotating}
%\usetikzlibrary{through,backgrounds}
\hypersetup{%
pdfauthor={Ashudeep Singh},%
pdftitle={Homework},%
pdfkeywords={Tikz,latex,bootstrap,uncertaintes},%
pdfcreator={PDFLaTeX},%
pdfproducer={PDFLaTeX},%
}
%\usetikzlibrary{shadows}
% \usepackage[francais]{babel}
\usepackage{booktabs}
\usepackage{xcolor}
% Definindo novas cores
\definecolor{verde}{rgb}{0,0.5,0}
% Configurando layout para mostrar codigos C++
\usepackage{listings}
\lstset{
  language=C++,
  basicstyle=\ttfamily\small, 
  keywordstyle=\color{blue}, 
  stringstyle=\color{verde}, 
  commentstyle=\color{red}, 
  extendedchars=true, 
  showspaces=false, 
  showstringspaces=false, 
  numbers=left,
  numberstyle=\tiny,
  breaklines=true, 
  backgroundcolor=\color{green!10},
  breakautoindent=true, 
  captionpos=b,
  xleftmargin=0pt,
}

\input{macros.tex}


\begin{document}
\homework{Relatório ROOT}{Data: 03/11/2020}{Sandro Fonseca, Sheila Amaral, Eliza Melo}{}{Matheus Macedo}

{\bf Macro do ROOT no C++ }


Foi construido dois códigos em C++ com extensões, .h e .C .
O primeiro caracteriza as funções que serão usadas no .C.\\
Abaixo, segue primeiramente o código .h




\begin{lstlisting}
#ifndef Analyze_h
#define Analyze_h

#include <TROOT.h>
#include <TChain.h>
#include <TFile.h>
#include <TSelector.h>
#include <TTreeReader.h>
#include <TTreeReaderValue.h>
#include <TTreeReaderArray.h>

// Headers needed by this particular selector


class Analyze : public TSelector {
public :
TTreeReader     fReader;  //!the tree reader
TTree          *fChain = 0;   //!pointer to the analyzed TTree or TChain

// Readers to access the data (delete the ones you do not need).
TTreeReaderValue<Int_t> event = {fReader, "event"};
TTreeReaderValue<Float_t> ebeam = {fReader, "ebeam"};
TTreeReaderValue<Float_t> px = {fReader, "px"};
TTreeReaderValue<Float_t> py = {fReader, "py"};
TTreeReaderValue<Float_t> pz = {fReader, "pz"};
TTreeReaderValue<Float_t> zv = {fReader, "zv"};
TTreeReaderValue<Float_t> chi2 = {fReader, "chi2"};


Analyze(TTree * /*tree*/ =0) { }
virtual ~Analyze() { }
virtual Int_t   Version() const { return 2; }
virtual void    Begin(TTree *tree);
virtual void    SlaveBegin(TTree *tree);
virtual void    Init(TTree *tree);
virtual Bool_t  Notify();
virtual Bool_t  Process(Long64_t entry);
virtual Int_t   GetEntry(Long64_t entry, Int_t getall = 0) { return fChain ? fChain->GetTree()->GetEntry(entry, getall) : 0; }
virtual void    SetOption(const char *option) { fOption = option; }
virtual void    SetObject(TObject *obj) { fObject = obj; }
virtual void    SetInputList(TList *input) { fInput = input; }
virtual TList  *GetOutputList() const { return fOutput; }
virtual void    SlaveTerminate();
virtual void    Terminate();
// Declaring pT and theta vars.
Float_t pT;
Float_t theta;
// Declaring i and j to count the number of eventos above some cut defined on .C file
Int_t i=0;
Int_t j=0;
ClassDef(Analyze,0);

};

#endif

#ifdef Analyze_cxx
void Analyze::Init(TTree *tree)
{
fReader.SetTree(tree);
}

Bool_t Analyze::Notify()
{
return kTRUE;
}


#endif // #ifdef Analyze_cxx
\end{lstlisting}

De posse dessa estrutura, foi apresentado para nós uma formação primária do código em C para ser incrementado de acordo com o que os exercícios foram propostos durante a aula. \\

O arquivo .h tem nome de \textit{Analize.h} e fazemos um \textbf{include Analyze.h} no código principal .C para fazer os histogramas propostos.\\
Abaixo está o código que será executado no ambiente ROOT (\textit{Analize.C}).

\begin{lstlisting}
#define Analyze_cxx
#include "Analyze.h"
#include <TH2.h>
#include <TStyle.h>

//**********Definition section**********

TH1* chi2Hist = NULL;
TH1* ebeamHist = NULL;
TH2* chi2ebeamHist = NULL;
TH1* thetaHist = NULL;
TH1* ptHist = NULL;

void Analyze::Begin(TTree * /*tree*/)
{
TString option = GetOption();

// ********** Inicializando a secao ********** 
chi2Hist = new TH1D("chi2", "Histogram of Chi2", 100, 0, 2.);
chi2Hist->GetXaxis()->SetTitle("chi2");
chi2Hist->GetYaxis()->SetTitle("# Eventos");

//  Cria um histograma ebeamHist 
ebeamHist = new TH1D("ebeam", "Histograma do ebeam", 100, 149., 151.);
ebeamHist->GetXaxis()->SetTitle("ebeam (GeV)");
ebeamHist->GetYaxis()->SetTitle("# Eventos");

//  Cria um plot de dispersao entre o chi2 e ebeam
chi2ebeamHist = new TH2F("chi2xebeam", "Dispersao do chi2 e ebeam", 100, 0.4, 1.6, 100, 149.4, 150.6);
chi2ebeamHist->GetXaxis()->SetTitle("chi2");
chi2ebeamHist->GetYaxis()->SetTitle("ebeam (GeV)");

//  Cria um histograma do Pt
ptHist = new TH1D("p_{T}", "Histograma do p_{T}", 100, 0, 35);
ptHist->GetXaxis()->SetTitle("pT (GeV)");
ptHist->GetYaxis()->SetTitle("# Eventos");

//  Cria um histograma thetaHist
thetaHist = new TH1D("theta", "Histograma do theta", 100, -3.15, 3.15);
thetaHist->GetXaxis()->SetTitle("theta");
thetaHist->GetYaxis()->SetTitle("# Eventos");


}

void Analyze::SlaveBegin(TTree * /*tree*/){}

Bool_t Analyze::Process(Long64_t entry)
{
// Do not delete this line! Without it the program will crash
fReader.SetLocalEntry(entry);

//**********Loop section**********
GetEntry(entry);
chi2Hist->Fill(*chi2);

ebeamHist->Fill(*ebeam);

chi2ebeamHist->Fill(*chi2,*ebeam);

// Calculo do pT e preechendoo o histograma: 
pT = TMath::Sqrt((*px)*(*px)+(*py)*(*py));
ptHist->Fill(pT);

// Calculo do theta e preechendoo o histograma:
theta = TMath::ATan2((*py),(*px));
thetaHist->Fill(theta);


// j conta todos os eventos
j++;
// i conta todos os eventos com pz < 145.0 GeV
if (TMath::Abs(*pz)<145.) {
// Here we print the value of pz (when pz<145 GeV) on screen
std::cout << *pz << i << std::endl; 
i++;
}

return kTRUE;
}

void Analyze::SlaveTerminate(){}

void Analyze::Terminate()
{
//**********Wrap-up section**********
// Draw chi2Hist with error bars
chi2Hist->Draw("E1SAME");

//Fit a gaussian to ebeam distribuition and draw ebeamHist with error bars
ebeamHist->Fit("gaus","V","E1SAME",149.,151.);

// Set the position of Stat Box
gStyle->SetStatX(0.9);
gStyle->SetStatY(0.9);

// Set the position of chi2ebeamHist Y axis title
chi2ebeamHist->GetYaxis()->SetTitleOffset(1.4);

// Plot de dispersao do chi2 e ebeam Hist 

chi2ebeamHist->Draw("scat=0.8"); 

// Reset the stat box
gStyle->Reset();
// Set the position of ptHist Y axis title
ptHist->GetYaxis()->SetTitleOffset(1.4);
// Draw thetaHist and ptHist
thetaHist->SetFillColor(6);
thetaHist->Draw();    

ptHist->SetFillColor(30);
ptHist->Draw();


// Print on screen how many events have pz<145 GeV
std::cout << "The number of events with pz < 145.0 is " << i << std::endl;

// Recrie um arquivo chamado "experiment-output.root" e escreva os histogramas

TFile file("experiment-output.root","recreate");
chi2Hist->Write();
ebeamHist->Write();
chi2ebeamHist->Write();
ptHist->Write();
thetaHist->Write();
file.Write();
file.Close();
}
\end{lstlisting}



\end{document} 
